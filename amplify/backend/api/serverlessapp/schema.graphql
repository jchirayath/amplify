input AMPLIFY {
  globalAuthRule: AuthRule = {allow: public}
}

input CreateUsersInput {
  id: String!
  name: String!
  email: String!
}

type Users {
  id: String!
  name: String!
  email: String!
}

input UpdateUsersInput {
  id: String!
  name: String
  email: String
}

type Mutation {
  deleteUsers(id: String!): Users
  createUsers(createUsersInput: CreateUsersInput!): Users
  updateUsers(updateUsersInput: UpdateUsersInput!): Users
  deleteProducts(id: String!): Products
  createProducts(createProductsInput: CreateProductsInput!): Products
  updateProducts(updateProductsInput: UpdateProductsInput!): Products
}

type Query {
  getUsers(id: String!): Users
  listUserss: [Users]
  getProducts(id: String!): Products
  listProductss: [Products]
  listProductsByUser(ownerId: String!): [Products]
}

type Subscription {
  onCreateUsers: Users @aws_subscribe(mutations: ["createUsers"])
  onCreateProducts: Products @aws_subscribe(mutations: ["createProducts"])
}

schema {
  query: Query
  mutation: Mutation
  subscription: Subscription
}

input CreateProductsInput {
  id: String!
  email: String!
  leftWidth: Float!
  leftLength: Float!
  leftHeight: Float!
  leftLogo: String!
  rightWidth: Float!
  rightLength: Float!
  rightHeight: Float!
  rightLogo: String!
  createdAt: String!
  updatedAt: String!
  fileKey: String
  ownerId: String!
}

type Products {
  id: String!
  email: String!
  leftWidth: Float!
  leftLength: Float!
  leftHeight: Float!
  leftLogo: String!
  rightWidth: Float!
  rightLength: Float!
  rightHeight: Float!
  rightLogo: String!
  createdAt: String!
  updatedAt: String!
  fileKey: String
  ownerId: String!
}

input UpdateProductsInput {
  id: String!
  email: String
  leftWidth: Float
  leftLength: Float
  leftHeight: Float
  leftLogo: String
  rightWidth: Float
  rightLength: Float
  rightHeight: Float
  rightLogo: String
  createdAt: String
  updatedAt: String
  fileKey: String
  ownerId: String
}
